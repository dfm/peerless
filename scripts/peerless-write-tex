#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import argparse
import numpy as np
import pandas as pd

from peerless.occurrence import compute_occurrence
from peerless.catalogs import (
    CumulativeCatalog, UeharaCatalog, WangCatalog, TargetCatalog
)


parser = argparse.ArgumentParser(
    description="write TeX tables for the paper"
)
parser.add_argument("fits", help="the csv of fit results")
parser.add_argument("injections", help="the hdf5 file of injections")
parser.add_argument("-f", "--fig-output", default="figures",
                    help="the root directory for the figure output")
parser.add_argument("-t", "--tex-output", default="document",
                    help="the root directory for the TeX output")
args = parser.parse_args()

df = pd.read_csv(args.fits)
inj = pd.read_hdf(args.injections, "injections")
kois = CumulativeCatalog().df
wang = WangCatalog().df
uehara = UeharaCatalog().df
targets = TargetCatalog().df

df = pd.merge(df, targets, left_on="kicid", right_on="kepid",
              suffixes=["", "_stlr"])

with open(os.path.join(args.tex_output, "numbers.tex"), "w") as f:
    f.write("% Automatically generated\n")
    f.write("\\newcommand{{\\numtargets}}{{{0:,}}}\n".format(len(targets)))
    f.write("\\newcommand{{\\numinjs}}{{{0:,}}}\n".format(len(inj)))
    f.write("\\newcommand{{\\numcands}}{{{0:,}}}\n".format(len(df)))

with open(os.path.join(args.tex_output, "lcfig.tex"), "w") as f:
    for _, row in df.sort_values("radius").iterrows():
        f.write("\includegraphics[width=0.24\\textwidth]{{{0}/lcs/{1}.pdf}}\n"
                .format(args.fig_output, int(row.kicid)))


with open(os.path.join(args.tex_output, "paramtab.tex"), "w") as f:
    f.write("""\\tablehead{
    \colhead{kic id} &
    \colhead{$T_\mathrm{eff}$} &
    \colhead{$R_\star$} &
    \colhead{Kp} &
    \colhead{period} & \colhead{$t_0$} &
    \colhead{radius} &
    \colhead{$T_\mathrm{eq}$\\tablenotemark{*}} &
    \colhead{comments} \\\\
    & \colhead{K} & \colhead{$R_\oplus$} && \colhead{years} & \colhead{KBJD} &
    \colhead{$R_\mathrm{J}$} & $R_\mathrm{J}$ &
}
\\rotate
\startdata\n""")
    for _, row in df.sort_values("kicid").iterrows():
        # Compute the comment.
        koi = kois[kois.kepid == row.kicid]
        comment = []
        if len(koi):
            koiname = int(koi.kepoi_name.iloc[0][1:-3])
            name = "KOI {0}".format(koiname)
            if not koi.kepler_name.isnull().iloc[0]:
                name += " / Kepler-{0}".format(
                    int(koi.kepler_name.iloc[0][7:-2]))
            comment.append(name)
        elif row.kicid == 8800954:
            comment = ["KOI 1274 / Kepler-421"]
        comment = "; ".join(comment)

        notes = []
        if row.n_transits > 1:
            notes.append("\dagger")
        w = wang[wang.kicid == row.kicid]
        if len(w):
            notes.append("a")
        u = uehara[uehara.kepid == row.kicid]
        if len(u):
            notes.append("b")

        # And the columns of the table.
        f.write("{0:d}$^{{\mathrm{{{1}}}}}$ & ".format(int(row.kicid),
                                                       ",".join(notes)))

        cols = []
        cols.append("${0:.0f}_{{{1:.0f}}}^{{+{2:.0f}}}$".format(
            row.teff, row.teff_err2, row.teff_err1))
        cols.append("${0:.2f}_{{{1:.2f}}}^{{+{2:.2f}}}$".format(
            row.radius_stlr, row.radius_err2, row.radius_err1))
        cols.append("${0:.1f}$".format(row.kepmag))

        for v in ["period", "t0", "radius", "teq"]:
            u = np.array(row[[v+"_uncert_minus", v+"_uncert_plus"]],
                         dtype=float)
            nd = int(-min(0, np.floor(np.min(np.log10(u)) - 1)))
            minus = ("{{0:.{0:d}f}}".format(nd)).format(u[0])
            plus = ("{{0:.{0:d}f}}".format(nd)).format(u[1])
            mean = ("{{0:.{0:d}f}}".format(nd)).format(row[v])
            cols.append("${0}_{{-{1}}}^{{+{2}}}$".format(mean, minus, plus))
        cols.append(comment)
        f.write(" & ".join(cols) + "\\\\\n")
    f.write("\enddata\n")


occ = compute_occurrence(inj, df, [0.1, 0.4, 1.0], [2.0, 25.0])
with open(os.path.join(args.tex_output, "ortab.tex"), "w") as f:
    f.write("""\\tablehead{
    \colhead{$R_\mathrm{min}\,[R_\mathrm{J}]$} &
    \colhead{$R_\mathrm{max}\,[R_\mathrm{J}]$} &
    \colhead{$\Gamma_V$\\tablenotemark{a}}
}
\startdata\n""")
    for _, row in occ.iterrows():
        f.write("${0:.1f}$ & ${1:.1f}$ & ${2:.2f}\pm{3:.2f}$ \\\\\n"
                .format(row.radius_min, row.radius_max,
                        row.rate_density, row.rate_density_uncert))
    f.write("\enddata\n")
