#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import h5py
import pickle
import argparse
import numpy as np
import pandas as pd
from functools import partial
import matplotlib.pyplot as pl

from peerless.autocorr import integrated_time
from peerless.settings import PEERLESS_DATA_DIR


def collect_one(kicid, root=None):
    n = int((cands.kicid == kicid).sum())
    assert n in [1, 2]

    if n == 2:
        d, sig = np.empty(2), np.empty(2)
        for i in range(2):
            s = "{0:02d}".format(i)
            fn = "{0}.{1}".format(kicid, s)
            with open(os.path.join(root, fn, "init.pkl"), "rb") as f:
                model = pickle.load(f)
            model.system.central.dilution = 0.0
            model.system.freeze_parameter("central:dilution")

            with h5py.File(os.path.join(root, fn, "chain.h5"), "r") as f:
                num = f.attrs["step"]
                m = f["params"]["ncadence"][num//2:num] == 0
                chain = f["chain"][num//2:num][m]
                if "depth" not in f["params"].dtype.names:
                    depths = None
                else:
                    depths = f["params"]["depth"][num//2:num][m]

            if depths is None:
                depths = np.empty(2000)
                s = model.system
                for ind, j in enumerate(np.random.randint(len(chain),
                                                          size=len(depths))):
                    s.set_vector(np.array(list(chain[j])))
                    t0 = model.system.bodies[0].t0
                    f = s.central.flux
                    depths[ind] = (f - float(s.light_curve(t0))) / f

            d[i] = np.mean(depths)
            sig[i] = np.std(depths)

        s2n = float(np.abs(np.diff(d))) / np.max(sig)
        if s2n > 5.0:
            fn = "{0}.{1:02d}".format(kicid, np.argmin(d))
        else:
            fn = "{0}.full".format(kicid)
    else:
        fn = "{0}".format(kicid)

    with open(os.path.join(root, fn, "init.pkl"), "rb") as f:
        model = pickle.load(f)
    model.system.central.dilution = 0.0
    model.system.freeze_parameter("central:dilution")

    with h5py.File(os.path.join(root, fn, "chain.h5"), "r") as f:
        b = f.attrs["step"]
        a = b // 3
        c = 10
        m = f["params"]["ncadence"][a:b:c] == 0
        chain = f["chain"][a:b:c]
        params = f["params"][a:b:c]
        data = f["data"][...]

    tau = [integrated_time(np.mean(chain[k], axis=1), c=1)
           for k in chain.dtype.names]
    nsamps = chain.shape[1] * len(chain)
    nind = nsamps / np.mean(tau)

    chain = chain[m]
    params = params[m]

    # Compute the planet parameters:

    # Period (years):
    period_samps = params["period"] / 365.25
    period = np.percentile(period_samps, [16, 50, 84])

    # T0 (KBJD):
    t0_samps = params["bodies[0]:t0"]
    t0 = np.percentile(t0_samps, [16, 50, 84])

    # Radius (Jupiter radii):
    radius_samps = np.exp(chain["bodies[0]:ln_radius"] - np.log(0.0995))
    radius = np.percentile(radius_samps, [16, 50, 84])

    # Depth (ppt):
    depth_samps = params["depth"] * 1e3
    depth = np.percentile(depth_samps, [16, 50, 84])

    print(kicid, nind, period[1], t0[1], radius[1], depth[1])

    x = np.linspace(-2, 2, 5000)
    for chunk in set(data["chunk"]):
        gp = model.gps[chunk]
        m = data["chunk"] == chunk

        t = data["time"]
        mu = model.system.light_curve()

    print(data.dtype)
    assert 0

parser = argparse.ArgumentParser(
    description="collect postprocess MCMC results"
)
parser.add_argument("candidates",
                    help="the csv of candidate files")
parser.add_argument("fits_root",
                    help="the root directory of the MCMC fit results")
parser.add_argument("-o", "--output", default=None,
                    help="the root directory for the output")
args = parser.parse_args()

if args.output is None:
    outdir = os.path.join(PEERLESS_DATA_DIR, "results", "fits")
else:
    outdir = args.output

function = partial(collect_one, root=args.fits_root)

cands = pd.read_csv(args.candidates)
kicids = list(set(np.array(cands[cands.accept].kicid)))

# kicids = [8463272, 3239945, 8410697, 8800954]  # multis
# kicids = [6342758]

list(map(function, kicids))
