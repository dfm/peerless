#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import h5py
import pickle
import corner
import argparse
import numpy as np
import pandas as pd
from functools import partial
import matplotlib.pyplot as pl
from multiprocessing import Pool
from collections import OrderedDict

from peerless.plot_setup import COLORS
from peerless.mr import ChenMRRelation
from peerless.catalogs import TargetCatalog
from peerless.autocorr import integrated_time

from matplotlib import rcParams
rcParams["figure.autolayout"] = False


def collect_one(kicid, root=None, fig_output="document/figures",
                sample_output="results/chains"):
    np.random.seed(kicid)

    n = int((cands.kicid == kicid).sum())
    assert n in [1, 2]

    # Get the stellar properties.
    kic = TargetCatalog().df
    star = kic[kic.kepid == kicid]
    if not len(star):
        print("Skipping {0}...".format(kicid))
        return
    teff = float(star.teff)
    teff_err = np.mean(np.abs(np.array(star[["teff_err1", "teff_err2"]])))

    if n == 2:
        d, sig = np.empty(2), np.empty(2)
        for i in range(2):
            s = "{0:02d}".format(i)
            fn = "{0}.{1}".format(kicid, s)
            with open(os.path.join(root, fn, "init.pkl"), "rb") as f:
                model = pickle.load(f)
            model.system.central.dilution = 0.0
            model.system.freeze_parameter("central:dilution")

            with h5py.File(os.path.join(root, fn, "chain.h5"), "r") as f:
                num = f.attrs["step"]
                m = f["params"]["ncadence"][num//2:num] == 0
                chain = f["chain"][num//2:num][m]
                if "depth" not in f["params"].dtype.names:
                    depths = None
                else:
                    depths = f["params"]["depth"][num//2:num][m]

            if depths is None:
                depths = np.empty(2000)
                s = model.system
                for ind, j in enumerate(np.random.randint(len(chain),
                                                          size=len(depths))):
                    s.set_vector(np.array(list(chain[j])))
                    t0 = model.system.bodies[0].t0
                    f = s.central.flux
                    depths[ind] = (f - float(s.light_curve(t0))) / f

            d[i] = np.mean(depths)
            sig[i] = np.std(depths)

        s2n = float(np.abs(np.diff(d))) / np.max(sig)
        if s2n > 5.0:
            fn = "{0}.{1:02d}".format(kicid, np.argmin(d))
        else:
            fn = "{0}.full".format(kicid)
    else:
        fn = "{0}".format(kicid)

    with open(os.path.join(root, fn, "init.pkl"), "rb") as f:
        model = pickle.load(f)
    model.system.central.dilution = 0.0
    model.system.freeze_parameter("central:dilution")

    with h5py.File(os.path.join(root, fn, "chain.h5"), "r") as f:
        b = f.attrs["step"]
        a = b // 3
        c = 10
        m = f["params"]["ncadence"][a:b:c] == 0
        chain = f["chain"][a:b:c]
        lnprob = f["lnprob"][a:b:c]
        lnprior = f["lnprior"][a:b:c]
        params = f["params"][a:b:c]

    tau = [integrated_time(np.mean(chain[k], axis=1), c=1)
           for k in chain.dtype.names]
    nsamps = chain.shape[1] * len(chain)
    nind = nsamps / np.mean(tau)

    sfn = os.path.join(sample_output, "{0}.h5".format(kicid))
    os.makedirs(sample_output, exist_ok=True)
    with h5py.File(sfn, "w") as f:
        f.attrs["kicid"] = kicid
        f.attrs["tau"] = np.array(tau)
        f.create_dataset("chain", data=chain, compression="gzip")
        f.create_dataset("lnprob", data=lnprob, compression="gzip")
        f.create_dataset("lnprior", data=lnprior, compression="gzip")
        f.create_dataset("params", data=params, compression="gzip")

    chain = chain[m]
    lnprob = lnprob[m]
    params = params[m]

    # Get the median probability model.
    i = np.argmax(lnprob == np.median(lnprob))
    model.system.set_vector(np.array(list(chain[i])))

    # Plot the transit.
    fig, ax = pl.subplots(1, 1, figsize=(3, 2))
    t0 = model.system.bodies[0].t0
    period = model.system.bodies[0].period
    x = np.linspace(-2, 2, 5000)
    mx, mn = -np.inf, np.inf
    for gp, lc in zip(model.gps, model.fit_lcs):
        t = (lc.time - t0 + 0.5*period) % period - 0.5*period
        mu = model.system.light_curve(lc.time, texp=lc.texp, maxdepth=2)
        r = (lc.flux - mu) * 1e3
        p = gp.predict(r, lc.time, return_cov=False) * 1e-3
        y = (lc.flux - p - 1.0) * 1e3
        ax.plot(t, y, ".", color=COLORS["DATA"], rasterized=True)
        mx = max(mx, y.max())
        mn = min(mn, y.min())

    mu = model.system.light_curve(x + t0, texp=lc.texp, maxdepth=2)
    ax.plot(x, (mu - 1.0) * 1e3, color=COLORS["MODEL_2"], lw=1.5)
    ax.set_xlim(-2, 2)
    ax.set_ylim(0.5*(mx+mn) + (mx - mn) * 1.1 * np.array([-0.5, 0.5]))
    ax.xaxis.set_major_locator(pl.NullLocator())
    ax.yaxis.set_major_locator(pl.MaxNLocator(4))
    ax.annotate("flux [ppt]", xy=(0, 0), xycoords="axes fraction",
                xytext=(5, 5), textcoords="offset points", fontsize=14)
    ax.annotate("{0}".format(kicid), xy=(1, 0), xycoords="axes fraction",
                xytext=(-5, 5), textcoords="offset points", fontsize=14,
                ha="right")
    # pl.tight_layout()
    fig.subplots_adjust(left=0.2, bottom=0.03, right=0.98, top=0.97)
    os.makedirs(os.path.join(fig_output, "lcs"), exist_ok=True)
    fig.savefig(os.path.join(fig_output, "lcs", "{0}.pdf".format(kicid)),
                dpi=300)
    pl.close(fig)

    # Compute the planet parameters:

    # Equilibrium temperature (K):
    a = chain["bodies[0]:sqrt_a_cos_i"]**2 + chain["bodies[0]:sqrt_a_sin_i"]**2
    factor = np.sqrt(0.5 * np.exp(chain["central:ln_radius"]) / a)
    albedo = 0.0
    factor *= (1.0 - albedo) ** 0.25
    teq_samps = (teff + teff_err * np.random.randn(len(factor))) * factor
    teq = np.percentile(teq_samps, [16, 50, 84])

    # Period (years):
    period_samps = params["period"] / 365.25
    period = np.percentile(period_samps, [16, 50, 84])

    # Duration (hours):
    b = params["impact"]
    e = params["eccen"]
    Rsoa = np.exp(chain["central:ln_radius"]) / a
    k = np.exp(chain["bodies[0]:ln_radius"] - chain["central:ln_radius"])
    incl = np.arctan2(chain["bodies[0]:sqrt_a_sin_i"],
                      chain["bodies[0]:sqrt_a_cos_i"])
    sin_omega = chain["bodies[0]:sqrt_e_sin_omega"] / np.sqrt(e)
    dur_samps = period_samps / np.pi * np.sqrt(1-e**2) / (1+e*sin_omega)
    dur_samps *= np.arcsin(Rsoa*np.sqrt((1+k)**2 - b**2) / np.sin(incl))
    dur_samps *= 365.25 * 24.
    duration = np.percentile(dur_samps, [16, 50, 84])

    # T0 (KBJD):
    t0_samps = chain["bodies[0]:t0"]
    t0 = np.percentile(t0_samps, [16, 50, 84])

    # Radius (Jupiter radii):
    radius_samps = np.exp(chain["bodies[0]:ln_radius"]-np.log(0.0995))
    radius = np.percentile(radius_samps, [16, 50, 84])

    # Depth (ppt):
    depth_samps = params["depth"] * 1e3
    depth = np.percentile(depth_samps, [16, 50, 84])

    # Other parameters:
    impact = np.percentile(b, [16, 50, 84])
    eccen = np.percentile(e, [16, 50, 84])
    semimajor = np.percentile(a / 215.1, [16, 50, 84])

    # Predict the masses:
    mrrel = ChenMRRelation()
    mass_samps = mrrel.predict_mass(radius_samps*10.864, 1)  # Earths
    mass_samps = mass_samps[0, :] / 317.828  # Jupiters
    mass = np.percentile(mass_samps, [16, 50, 84])

    # Predict the RV semi-amplitude:
    K_samps = 28.4329 / np.sqrt(1.0 - e**2) * mass_samps * np.sin(incl)
    K_samps /= np.sqrt(a / 215.1)
    K_samps /= np.sqrt(mass_samps*9.5458e-4 + np.exp(chain["central:ln_mass"]))
    semiamp = np.percentile(K_samps, [16, 50, 84])

    acc_samps = K_samps / period_samps
    rvaccel = np.percentile(acc_samps, [16, 50, 84])

    print(kicid, nind, period[1], t0[1], radius[1], depth[1], teq[1],
          duration[1])

    # Make a corner plot.
    corner_samples = np.vstack(
        [np.log10(period_samps), np.log10(radius_samps), b, e]
    ).T
    fig = corner.corner(corner_samples[::113], smooth=1, smooth1d=1, labels=[
        "$\log_{10}P/\mathrm{years}$", "$\log_{10}R/R_\mathrm{J}$", "$b$",
        "$e$"
    ])
    os.makedirs(os.path.join(fig_output, "params"), exist_ok=True)
    fig.savefig(os.path.join(fig_output, "params", "{0}.pdf".format(kicid)),
                dpi=300)
    pl.close(fig)

    return OrderedDict([
        ("kicid", kicid),
        ("n_transits", n),
        ("min_period", model.min_period / 365.25),
        ("period", period[1]),
        ("period_uncert_plus", period[2]-period[1]),
        ("period_uncert_minus", period[1]-period[0]),
        ("t0", t0[1]),
        ("t0_uncert_plus", t0[2]-t0[1]),
        ("t0_uncert_minus", t0[1]-t0[0]),
        ("radius", radius[1]),
        ("radius_uncert_plus", radius[2]-radius[1]),
        ("radius_uncert_minus", radius[1]-radius[0]),
        ("teq", teq[1]),
        ("teq_uncert_plus", teq[2]-teq[1]),
        ("teq_uncert_minus", teq[1]-teq[0]),
        ("duration", duration[1]),
        ("duration_uncert_plus", duration[2]-duration[1]),
        ("duration_uncert_minus", duration[1]-duration[0]),
        ("depth", depth[1]),
        ("depth_uncert_plus", depth[2]-depth[1]),
        ("depth_uncert_minus", depth[1]-depth[0]),
        ("impact", impact[1]),
        ("impact_uncert_plus", impact[2]-impact[1]),
        ("impact_uncert_minus", impact[1]-impact[0]),
        ("eccen", eccen[1]),
        ("eccen_uncert_plus", eccen[2]-eccen[1]),
        ("eccen_uncert_minus", eccen[1]-eccen[0]),
        ("semimajor", semimajor[1]),
        ("semimajor_uncert_plus", semimajor[2]-semimajor[1]),
        ("semimajor_uncert_minus", semimajor[1]-semimajor[0]),
        ("mass", mass[1]),
        ("mass_uncert_plus", mass[2]-mass[1]),
        ("mass_uncert_minus", mass[1]-mass[0]),
        ("semiamp", semiamp[1]),
        ("semiamp_uncert_plus", semiamp[2]-semiamp[1]),
        ("semiamp_uncert_minus", semiamp[1]-semiamp[0]),
        ("rvaccel", rvaccel[1]),
        ("rvaccel_uncert_plus", rvaccel[2]-rvaccel[1]),
        ("rvaccel_uncert_minus", rvaccel[1]-rvaccel[0]),
    ])

parser = argparse.ArgumentParser(
    description="collect postprocess MCMC results"
)
parser.add_argument("candidates",
                    help="the csv of candidate files")
parser.add_argument("fits_root",
                    help="the root directory of the MCMC fit results")
parser.add_argument("-o", "--output", default="results",
                    help="the root directory for the output")
parser.add_argument("-t", "--tex-output", default="document",
                    help="the root directory for the TeX output")
parser.add_argument("-f", "--fig-output", default="figures",
                    help="the root directory for the figure output")
parser.add_argument("kicids", nargs="*", help="some KIC IDs",
                    type=int)
args = parser.parse_args()

cands = pd.read_csv(args.candidates)

function = partial(collect_one, root=args.fits_root,
                   fig_output=os.path.join(args.tex_output, args.fig_output),
                   sample_output=args.output)

if args.kicids:
    kicids = args.kicids
else:
    kicids = list(set(np.array(cands[cands.accept].kicid)))

pool = Pool()
df = pd.DataFrame([v for v in list(pool.map(function, kicids))
                   if v is not None])
cols = df.columns.tolist()
cols.remove("kicid")
cols = ["kicid"] + cols
df = df[cols]
df.to_csv(os.path.join(args.output, "fits.csv"), index=False)
