#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division

import os
import argparse
import numpy as np
import pandas as pd

from peerless.occurrence import compute_occurrence
from peerless.catalogs import (
    CumulativeCatalog, UeharaCatalog, WangCatalog, TargetCatalog,
    KOICatalog
)


parser = argparse.ArgumentParser(
    description="write TeX tables for the paper"
)
parser.add_argument("candidates", help="the csv of candidates")
parser.add_argument("fits", help="the csv of fit results")
parser.add_argument("injections", help="the hdf5 file of injections")
parser.add_argument("fpp", help="the csv of fpps")
parser.add_argument("-f", "--fig-output", default="figures",
                    help="the root directory for the figure output")
parser.add_argument("-t", "--tex-output", default="document",
                    help="the root directory for the TeX output")
args = parser.parse_args()

df = pd.read_csv(args.fits)
inj = pd.read_hdf(args.injections, "injections")
inj["mass"] = 10 ** inj.log10_mass  # Earth masses
fpp = pd.read_csv(args.fpp)
df = pd.merge(df, fpp)
kois = CumulativeCatalog().df
wang = WangCatalog().df
uehara = UeharaCatalog().df
targets = TargetCatalog().df
inner = KOICatalog().df
inner = pd.merge(inner, targets[["kepid"]], how="inner")
inner = set(inner[inner.koi_pdisposition == "CANDIDATE"].kepid)

num_inner = df.kicid.isin(inner).sum()
num_kois = len(inner)
frac_inner = df.kicid.isin(inner).sum() / num_kois
frac_no_inner = (
    (~df.kicid.isin(inner)).sum() / (~targets.kepid.isin(inner)).sum()
)
frac_all = len(df) / len(targets)

cands = pd.read_csv(args.candidates)
cands = pd.merge(cands, targets[["kepid"]], left_on="kicid", right_on="kepid",
                 how="inner")
rejects = cands[cands.accept_bic & cands.accept_time & (~cands.accept)]

df = pd.merge(df, targets, left_on="kicid", right_on="kepid",
              suffixes=["", "_stlr"])

with open(os.path.join(args.tex_output, "lcfig.tex"), "w") as f:
    for _, row in df.sort_values("radius").iterrows():
        f.write("\includegraphics[width=0.24\\textwidth]{{{0}/lcs/{1}.pdf}}\n"
                .format(args.fig_output, int(row.kicid)))


with open(os.path.join(args.tex_output, "paramtab.tex"), "w") as f:
    f.write("""\\tablehead{
    \colhead{kic id} &
    \colhead{$T_\mathrm{eff}$} &
    \colhead{$R_\star$} &
    \colhead{Kp} &
    \colhead{period} & \colhead{$t_0$} &
    \colhead{radius} &
    \colhead{duration} &
    \colhead{impact} &
    \colhead{$T_\mathrm{eq}$\\tablenotemark{*}} &
    \colhead{$\mathrm{Pr}_\mathrm{planet}$} &
    \colhead{designation\\tablenotemark{$\dagger$}}
    \\\\
    & \colhead{K} & \colhead{$R_\odot$} && \colhead{years} & \colhead{KBJD} &
    \colhead{$R_\mathrm{J}$} & \colhead{hours} && \colhead{K} &&
}
\\rotate
\startdata\n""")
    for _, row in df.sort_values("kicid").iterrows():
        # Compute the comment.
        koi = kois[kois.kepid == row.kicid]
        comment = []
        if len(koi):
            koiname = int(koi.kepoi_name.iloc[0][1:-3])
            name = "{0}".format(koiname)
            if not koi.kepler_name.isnull().iloc[0]:
                name += " / {0}".format(
                    int(koi.kepler_name.iloc[0][7:-2]))
            else:
                name += " / none"
            comment.append(name)
        elif row.kicid == 8800954:
            comment = ["1274 / 421"]
        comment = "; ".join(comment)

        notes = []
        if row.n_transits > 1:
            notes.append("c")
        w = wang[wang.kicid == row.kicid]
        if len(w):
            notes.append("a")
        u = uehara[uehara.kepid == row.kicid]
        if len(u):
            notes.append("b")

        # And the columns of the table.
        f.write("{0:d}$^{{\mathrm{{{1}}}}}$ & ".format(int(row.kicid),
                                                       ",".join(notes)))

        cols = []
        cols.append("${0:.0f}_{{{1:.0f}}}^{{+{2:.0f}}}$".format(
            row.teff, row.teff_err2, row.teff_err1))
        cols.append("${0:.2f}_{{{1:.2f}}}^{{+{2:.2f}}}$".format(
            row.radius_stlr, row.radius_err2, row.radius_err1))
        cols.append("${0:.1f}$".format(row.kepmag))

        for v in ["period", "t0", "radius", "duration", "impact", "teq"]:
            u = np.array(row[[v+"_uncert_minus", v+"_uncert_plus"]],
                         dtype=float)
            nd = int(-min(0, np.floor(np.min(np.log10(u)) - 1)))
            minus = ("{{0:.{0:d}f}}".format(nd)).format(u[0])
            plus = ("{{0:.{0:d}f}}".format(nd)).format(u[1])
            mean = ("{{0:.{0:d}f}}".format(nd)).format(row[v])
            cols.append("${0}_{{-{1}}}^{{+{2}}}$".format(mean, minus, plus))

        pr = row.pr_pl
        if pr > 0.01:
            cols.append("${0:.2f}$".format(pr))
        else:
            nd = int(np.floor(np.log10(pr)))
            cols.append("${0:.1f} \\times 10^{{{1:.0f}}}$".format(
                pr * 10**(-nd), nd
            ))
        cols.append(comment)
        f.write(" & ".join(cols) + "\\\\\n")
    f.write("\enddata\n")

with open(os.path.join(args.tex_output, "masstab.tex"), "w") as f:
    f.write("""\\tablehead{
    \colhead{kic id} &
    \colhead{Kp} &
    \colhead{radius} &
    \colhead{mass} &
    \colhead{period} &
    \colhead{$t_0$} &
    \colhead{semi-major axis} &
    \colhead{semi-amplitude} &
    \colhead{$K / P$} \\\\
    && \colhead{$R_\mathrm{J}$} & \colhead{$M_\mathrm{J}$} & \colhead{year} &
    \colhead{KBJD} & \colhead{au} & \colhead{m s$^{-1}$} &
    \colhead{m s$^{-1}$ yr$^{-1}$}
}
\\rotate
\startdata\n""")
    for _, row in df.sort_values("kicid").iterrows():
        # Compute the comment.
        koi = kois[kois.kepid == row.kicid]

        # And the columns of the table.
        f.write("{0:d} & ".format(int(row.kicid)))

        cols = []
        cols.append("${0:.1f}$".format(row.kepmag))
        for v in ["radius", "mass", "period", "t0", "semimajor", "semiamp",
                  "rvaccel"]:
            u = np.array(row[[v+"_uncert_minus", v+"_uncert_plus"]],
                         dtype=float)
            nd = int(-min(-1, np.floor(np.min(np.log10(u)) - 1)))
            minus = ("{{0:.{0:d}f}}".format(nd)).format(u[0])
            plus = ("{{0:.{0:d}f}}".format(nd)).format(u[1])
            mean = ("{{0:.{0:d}f}}".format(nd)).format(row[v])
            cols.append("${0}_{{-{1}}}^{{+{2}}}$".format(mean, minus, plus))
        f.write(" & ".join(cols) + "\\\\\n")
    f.write("\enddata\n")


with open(os.path.join(args.tex_output, "rejecttab.tex"), "w") as f:
    f.write("""\\tablehead{
    \colhead{kic id} &
    \colhead{time} &
    \colhead{{d}epth} &
    \colhead{duration} &
    \colhead{reason} \\\\
    & \colhead{KBJD} & \colhead{ppt} & \colhead{hours} &
}
\startdata\n""")
    for _, row in rejects.sort_values("kicid").iterrows():
        # And the columns of the table.
        f.write("{0:d} & ".format(int(row.kicid)))
        cols = []
        for v, fac in [("transit_time", 1.0),
                       ("transit_depth", 1e3),
                       ("transit_duration", 24.0)]:
            val = float(row[v]) * fac
            nd = int(-min(-1, np.floor(np.min(np.log10(val)) - 1)))
            cols.append(("{{0:.{0:d}f}}".format(nd)).format(val))
        if not row.accept_offset:
            cols.append("centroid")
        else:
            cols.append("impact")
        f.write(" & ".join(cols) + "\\\\\n")
    f.write("\enddata\n")


occ = compute_occurrence(inj, df, [2.0, 25.0], [0.1, 0.4, 1.0])
int_rate = occ.rate.sum()
int_rate_uncert = np.sqrt((occ.rate_uncert**2).sum())

occ = occ.append(compute_occurrence(inj, df, [2.0, 25.0], [0.1, 1.0]))
with open(os.path.join(args.tex_output, "ortab.tex"), "w") as f:
    f.write("""\\tablehead{
    \colhead{$R_\mathrm{min}\,[R_\mathrm{J}]$} &
    \colhead{$R_\mathrm{max}\,[R_\mathrm{J}]$} &
    \colhead{rate density\\tablenotemark{a}} &
    \colhead{integrated rate\\tablenotemark{b}}
}
\startdata\n""")
    for _, row in occ.iterrows():
        f.write(("${0:.1f}$ & ${1:.1f}$ & "
                 "${2:.2f}\pm{3:.2f}\,({4:.2f}\pm{5:.2f})$ & "
                 "${6:.2f}\pm{7:.2f}\,({8:.2f}\pm{9:.2f})$ \\\\\n")
                .format(row.radius_min, row.radius_max,
                        row.rate_density, row.rate_density_uncert,
                        row.rate_density_minus, row.rate_density_minus_uncert,
                        row.rate, row.rate_uncert,
                        row.rate_minus, row.rate_minus_uncert))
    f.write("\enddata\n")


mass_occ = compute_occurrence(inj, df,
                              [2.0, 25.0],
                              [0.01, 20.0],
                              y_name="mass", y_factor=317.828)
mass_semi_occ = compute_occurrence(inj, df,
                                   [1.5, 9.0],
                                   [0.01, 20.0],
                                   x_name="semimajor", x_factor=215.1,
                                   y_name="mass", y_factor=317.828)
with open(os.path.join(args.tex_output, "numbers.tex"), "w") as f:
    f.write("% Automatically generated\n")
    f.write(("\\newcommand{{\\fracinner}}{{\\ensuremath{{{0:.0f} \\times "
             "10^{{-4}}}}}}\n").format(frac_inner * 1e4))
    f.write(("\\newcommand{{\\fracnoinner}}{{\\ensuremath{{{0:.0f} \\times "
             "10^{{-4}}}}}}\n").format(frac_no_inner * 1e4))
    f.write("\\newcommand{{\\numinner}}{{{0:,}}}\n".format(num_inner))
    f.write("\\newcommand{{\\numkois}}{{{0:,}}}\n".format(num_kois))
    f.write("\\newcommand{{\\numtargets}}{{{0:,}}}\n".format(len(targets)))
    f.write("\\newcommand{{\\numinjs}}{{{0:,}}}\n".format(len(inj)))
    f.write("\\newcommand{{\\numcands}}{{{0:,}}}\n".format(len(df)))
    f.write("\\newcommand{{\\massocc}}{{\\ensuremath{{{0:.3f}\\pm{1:.3f}}}}}\n"
            .format(float(mass_occ.rate_density),
                    float(mass_occ.rate_density_uncert)))
    f.write(("\\newcommand{{\\massoccint}}{{\\ensuremath{{"
             "{0:.3f}\\pm{1:.3f}}}}}\n")
            .format(float(mass_occ.rate),
                    float(mass_occ.rate_uncert)))
    f.write(("\\newcommand{{\\masssemiocc}}{{\\ensuremath{{"
             "{0:.3f}\\pm{1:.3f}}}}}\n")
            .format(float(mass_semi_occ.rate_density),
                    float(mass_semi_occ.rate_density_uncert)))
    f.write(("\\newcommand{{\\masssemioccint}}{{\\ensuremath{{"
             "{0:.3f}\\pm{1:.3f}}}}}\n")
            .format(float(mass_semi_occ.rate),
                    float(mass_semi_occ.rate_uncert)))
    f.write("\\newcommand{{\\intocc}}{{\ensuremath{{{0:.2f}\\pm{1:.2f}}}}}\n"
            .format(int_rate, int_rate_uncert))
